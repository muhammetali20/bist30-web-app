"""
BIST30 AlÄ±m-SatÄ±m Bot - Telegram Bildirim ModÃ¼lÃ¼
"""

import os
import logging
import sys
import json
from datetime import datetime
import asyncio
from telegram import Bot
from telegram.constants import ParseMode
from telegram.error import TelegramError

# KonfigÃ¼rasyon dosyasÄ±nÄ± import et
from src.bot.config import *

# Loglama ayarlarÄ±
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(LOG_FILE_PATH),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger('TelegramNotifier')

class TelegramNotifier:
    """Telegram Ã¼zerinden bildirim gÃ¶nderen sÄ±nÄ±f"""
    
    def __init__(self, token=TELEGRAM_TOKEN, chat_id=TELEGRAM_CHAT_ID):
        """
        TelegramNotifier sÄ±nÄ±fÄ±nÄ± baÅŸlat
        
        Args:
            token: Telegram Bot API token
            chat_id: Mesaj gÃ¶nderilecek chat ID
        """
        self.token = token
        self.chat_id = chat_id
        self.bot = Bot(token=token)
        logger.info("TelegramNotifier baÅŸlatÄ±ldÄ±")
    
    async def send_message(self, message):
        """
        Telegram Ã¼zerinden mesaj gÃ¶nder
        
        Args:
            message: GÃ¶nderilecek mesaj
            
        Returns:
            bool: Ä°ÅŸlem baÅŸarÄ±lÄ± ise True, deÄŸilse False
        """
        try:
            await self.bot.send_message(
                chat_id=self.chat_id,
                text=message,
                parse_mode=ParseMode.HTML
            )
            logger.info("Telegram mesajÄ± gÃ¶nderildi")
            return True
        except TelegramError as e:
            logger.error(f"Telegram mesaj gÃ¶nderme hatasÄ±: {e}")
            return False
    
    def send_message_sync(self, message):
        """
        Telegram Ã¼zerinden mesaj gÃ¶nder (senkron)
        
        Args:
            message: GÃ¶nderilecek mesaj
            
        Returns:
            bool: Ä°ÅŸlem baÅŸarÄ±lÄ± ise True, deÄŸilse False
        """
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        try:
            result = loop.run_until_complete(self.send_message(message))
            return result
        finally:
            loop.close()
    
    def format_buy_signal(self, signal):
        """
        AlÄ±m sinyali iÃ§in mesaj formatla
        
        Args:
            signal: Sinyal bilgileri (dict)
            
        Returns:
            str: FormatlanmÄ±ÅŸ mesaj
        """
        return f"""
ğŸŸ¢ <b>ALIM SÄ°NYALÄ°</b> ğŸŸ¢

<b>Hisse:</b> {signal['symbol']}
<b>Fiyat:</b> {signal['current_price']:.2f} TL
<b>Tarih:</b> {signal['last_date'].strftime('%d.%m.%Y') if isinstance(signal['last_date'], datetime) else signal['last_date']}

<b>Sinyal Nedeni:</b>
{signal['buy_reason']}

<b>Hedef KÃ¢r:</b> %{TARGET_PROFIT_PERCENTAGE:.1f} (â‰ˆ {signal['current_price'] * (1 + TARGET_PROFIT_PERCENTAGE/100):.2f} TL)
<b>Stop-Loss:</b> %{STOP_LOSS_PERCENTAGE:.1f} (â‰ˆ {signal['current_price'] * (1 - STOP_LOSS_PERCENTAGE/100):.2f} TL)

#BIST30 #{signal['symbol']}
"""
    
    def format_sell_signal(self, signal):
        """
        SatÄ±m sinyali iÃ§in mesaj formatla
        
        Args:
            signal: Sinyal bilgileri (dict)
            
        Returns:
            str: FormatlanmÄ±ÅŸ mesaj
        """
        return f"""
ğŸ”´ <b>SATIM SÄ°NYALÄ°</b> ğŸ”´

<b>Hisse:</b> {signal['symbol']}
<b>Fiyat:</b> {signal['current_price']:.2f} TL
<b>Tarih:</b> {signal['last_date'].strftime('%d.%m.%Y') if isinstance(signal['last_date'], datetime) else signal['last_date']}

<b>Sinyal Nedeni:</b>
{signal['sell_reason']}

#BIST30 #{signal['symbol']}
"""
    
    def format_weekly_report(self, signals):
        """
        HaftalÄ±k rapor iÃ§in mesaj formatla
        
        Args:
            signals: TÃ¼m sinyaller (dict)
            
        Returns:
            str: FormatlanmÄ±ÅŸ mesaj
        """
        buy_signals = signals.get('buy_signals', [])
        sell_signals = signals.get('sell_signals', [])
        
        message = f"""
ğŸ“Š <b>BIST30 HAFTALIK RAPOR</b> ğŸ“Š
<b>Tarih:</b> {datetime.now().strftime('%d.%m.%Y')}

"""
        
        if buy_signals:
            message += "<b>ğŸŸ¢ ALIM SÄ°NYALLERÄ°</b>\n"
            for signal in buy_signals:
                message += f"â€¢ {signal['symbol']} - {signal['current_price']:.2f} TL\n"
            message += "\n"
        else:
            message += "<b>ğŸŸ¢ ALIM SÄ°NYALÄ° YOK</b>\n\n"
        
        if sell_signals:
            message += "<b>ğŸ”´ SATIM SÄ°NYALLERÄ°</b>\n"
            for signal in sell_signals:
                message += f"â€¢ {signal['symbol']} - {signal['current_price']:.2f} TL\n"
            message += "\n"
        else:
            message += "<b>ğŸ”´ SATIM SÄ°NYALÄ° YOK</b>\n\n"
        
        message += """
<i>DetaylÄ± bilgiler iÃ§in her sinyal ayrÄ±ca gÃ¶nderilecektir.</i>

#BIST30 #HaftalÄ±kRapor
"""
        return message
    
    def send_signals(self, signals):
        """
        TÃ¼m sinyalleri Telegram Ã¼zerinden gÃ¶nder
        
        Args:
            signals: TÃ¼m sinyaller (dict)
            
        Returns:
            bool: Ä°ÅŸlem baÅŸarÄ±lÄ± ise True, deÄŸilse False
        """
        try:
            buy_signals = signals.get('buy_signals', [])
            sell_signals = signals.get('sell_signals', [])
            
            # HaftalÄ±k rapor gÃ¶nder
            weekly_report = self.format_weekly_report(signals)
            self.send_message_sync(weekly_report)
            
            # AlÄ±m sinyallerini gÃ¶nder
            for signal in buy_signals:
                message = self.format_buy_signal(signal)
                self.send_message_sync(message)
            
            # SatÄ±m sinyallerini gÃ¶nder
            for signal in sell_signals:
                message = self.format_sell_signal(signal)
                self.send_message_sync(message)
            
            logger.info(f"Toplam {len(buy_signals)} alÄ±m ve {len(sell_signals)} satÄ±m sinyali gÃ¶nderildi")
            return True
        
        except Exception as e:
            logger.error(f"Sinyal gÃ¶nderme hatasÄ±: {e}")
            return False

# Test fonksiyonu
def test_telegram_notifier():
    """TelegramNotifier sÄ±nÄ±fÄ±nÄ± test et"""
    # Not: GerÃ§ek bir test iÃ§in geÃ§erli token ve chat_id gereklidir
    # Bu test fonksiyonu sadece kod yapÄ±sÄ±nÄ± gÃ¶stermek iÃ§indir
    
    print("Telegram Notifier Test")
    print("Not: GerÃ§ek bir test iÃ§in config.py dosyasÄ±nda geÃ§erli TELEGRAM_TOKEN ve TELEGRAM_CHAT_ID tanÄ±mlanmalÄ±dÄ±r.")
    
    # Test verileri
    test_signals = {
        'buy_signals': [
            {
                'symbol': 'GARAN',
                'buy_signal': True,
                'sell_signal': False,
                'buy_reason': 'Fiyat 5 haftalÄ±k MA Ã¼zerinde ve yÃ¼kseliÅŸ trendinde, RSI 30-50 aralÄ±ÄŸÄ±nda ve yÃ¼kseliÅŸ eÄŸiliminde',
                'sell_reason': 'Yeterli sinyal yok',
                'current_price': 110.50,
                'last_date': datetime.now()
            }
        ],
        'sell_signals': [
            {
                'symbol': 'THYAO',
                'buy_signal': False,
                'sell_signal': True,
                'buy_reason': 'Yeterli sinyal yok',
                'sell_reason': 'Hedef kÃ¢r yÃ¼zdesine ulaÅŸÄ±ldÄ±: %5.2',
                'current_price': 275.30,
                'last_date': datetime.now()
            }
        ]
    }
    
    # Mesaj formatlamayÄ± test et (token olmadan da Ã§alÄ±ÅŸÄ±r)
    notifier = TelegramNotifier()
    
    print("\nAlÄ±m Sinyali FormatÄ±:")
    buy_message = notifier.format_buy_signal(test_signals['buy_signals'][0])
    print(buy_message)
    
    print("\nSatÄ±m Sinyali FormatÄ±:")
    sell_message = notifier.format_sell_signal(test_signals['sell_signals'][0])
    print(sell_message)
    
    print("\nHaftalÄ±k Rapor FormatÄ±:")
    weekly_report = notifier.format_weekly_report(test_signals)
    print(weekly_report)
    
    # GerÃ§ek gÃ¶nderim testi (geÃ§erli token ve chat_id gerektirir)
    if TELEGRAM_TOKEN != "YOUR_TELEGRAM_TOKEN" and TELEGRAM_CHAT_ID != "YOUR_CHAT_ID":
        print("\nGerÃ§ek mesaj gÃ¶nderimi test ediliyor...")
        notifier.send_message_sync("ğŸ¤– BIST30 Bot Test MesajÄ±")
        print("Test mesajÄ± gÃ¶nderildi. LÃ¼tfen Telegram'Ä± kontrol edin.")
    else:
        print("\nGerÃ§ek mesaj gÃ¶nderimi iÃ§in geÃ§erli token ve chat_id gereklidir.")

if __name__ == "__main__":
    test_telegram_notifier()
